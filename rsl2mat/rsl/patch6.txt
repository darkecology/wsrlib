--- rsl-v1.47/wsr88d_m31.c	2014-10-27 16:22:26.000000000 -0400
+++ wsr88d_m31_dan.c	2015-07-22 13:31:28.000000000 -0400
@@ -175,21 +175,21 @@
 
     bitfield = bitfield >> 3;  /* 3 least significant bits aren't used. */
     for (i = 0; i < 12; i++) {
 	if (bitfield & mask) rate += value[i];
 	bitfield = bitfield >> 1;
     }
     if (bitfield >> 15) rate = -rate;
     return rate;
 }
 
-#define WSR88D_MAX_SWEEPS 20
+#define WSR88D_MAX_SWEEPS 30
 
 typedef struct {
     int vcp;
     int num_cuts;
     float vel_res;
     float fixed_angle[WSR88D_MAX_SWEEPS];
     float azim_rate[WSR88D_MAX_SWEEPS];
     int waveform[WSR88D_MAX_SWEEPS];
     int super_res_ctrl[WSR88D_MAX_SWEEPS];
     int surveil_prf_num[WSR88D_MAX_SWEEPS];
@@ -360,21 +360,21 @@
     if (strncmp(dataname, "DVEL", 4) == 0) return VR_INDEX;
     if (strncmp(dataname, "DSW",  3) == 0) return SW_INDEX;
     if (strncmp(dataname, "DZDR", 4) == 0) return DR_INDEX;
     if (strncmp(dataname, "DPHI", 4) == 0) return PH_INDEX;
     if (strncmp(dataname, "DRHO", 4) == 0) return RH_INDEX;
 
     return -1;
 }
 
 #define MAXRAYS_M31 800
-#define MAXSWEEPS 20
+#define MAXSWEEPS 30
 
 void wsr88d_load_ray_into_radar(Wsr88d_ray_m31 *wsr88d_ray, int isweep,
 	Radar *radar)
 {
     /* Load data into ray structure for each data field. */
 
     int data_index;
     int *field_offset;
     int ifield, nfields;
     int iray;
@@ -541,20 +541,21 @@
         END_VOS};
 
 
     /* Message type 31 is a variable length message.  All other types consist of
      * 1 or more segments of length 2432 bytes.  To handle all types, we read
      * the message header and check the type.  If not 31, then simply read
      * the remainder of the 2432-byte segment.  If it is 31, use the size given
      * in message header to determine how many bytes to read.
      */
 
+    bzero(&msghdr, sizeof(msghdr));
     n = fread(&msghdr, sizeof(Wsr88d_msg_hdr), 1, wf->fptr);
 
     /* printf("msgtype = %d\n", msghdr.msg_type); */
     msg_hdr_size = sizeof(Wsr88d_msg_hdr) - sizeof(msghdr.rpg);
 
     radar = RSL_new_radar(MAX_RADAR_VOLUMES);
     memset(&wsr88d_ray, 0, sizeof(Wsr88d_ray_m31)); /* Initialize to be safe. */
 
     while (! end_of_vos) {
 	if (msghdr.msg_type == 31) {
@@ -584,20 +585,27 @@
 		    wsr88d_ray.ray_hdr.elev_num-1 > isweep) {
 		fprintf(stderr,"Warning: Radial status is Start-of-Elevation, "
 			"but End-of-Elevation was not\n"
 			"issued for elevation number %d.  Number of rays = %d"
 			"\n", prev_elev_num, prev_raynum);
 		wsr88d_load_sweep_header(radar, isweep);
 		isweep++;
 		prev_elev_num = wsr88d_ray.ray_hdr.elev_num - 1;
 	    }
 
+            /* Check if this sweep number exceeds how many we allocated */
+            if (isweep > MAXSWEEPS) {
+		fprintf(stderr,"Error: isweep = %d, exceeds MAXSWEEPS (%d)\n", isweep, MAXSWEEPS);
+		RSL_free_radar(radar);
+		return NULL;                
+            }
+
 	    /* Load ray into radar structure. */
 	    wsr88d_load_ray_into_radar(&wsr88d_ray, isweep, radar);
 	    prev_raynum = raynum;
 
 	    /* Check for end of sweep */
 	    if (wsr88d_ray.ray_hdr.radial_status == END_OF_ELEV) {
 		wsr88d_load_sweep_header(radar, isweep);
 		isweep++;
 		prev_elev_num = wsr88d_ray.ray_hdr.elev_num;
 	    }
